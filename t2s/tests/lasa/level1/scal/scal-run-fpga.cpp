/*******************************************************************************
* Copyright 2021 Intel Corporation
*
* Licensed under the BSD-2-Clause Plus Patent License (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* https://opensource.org/licenses/BSDplusPatent
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions
* and limitations under the License.
*
*
* SPDX-License-Identifier: BSD-2-Clause-Patent
*******************************************************************************/
// The only header file needed for including T2S.
#include "util.h"

// The header file generated by dot.cpp
#include "scal-interface.h"
#include "const-parameters.h"

// Roofline utilities
#include "Roofline.h"

// For printing output
#include <stdio.h>
#include <iostream>

// For validation of results.
#include <assert.h>

using namespace std;

#define I           1024*1024
#define TOTAL_I     I*II

int main()
{
    Halide::Runtime::Buffer<float> x(TOTAL_I), o(II, I);

    for (size_t i = 0; i < TOTAL_I; i++) {
        x(i) = random();
    }
    float alpha = random();

    scal(x, alpha, o);

#ifdef TINY
    for (size_t i = 0; i < TOTAL_I; i++) {
        float golden = alpha*x(i);
        assert(fabs(golden - o(i)) <= 0.005 * fabs(golden));
    }
#else
    // Report performance. DSPs, FMax and ExecTime are automatically figured out from the static analysis
    // during FPGA synthesis and and the dynamic profile during the FGPA execution.
    float mem_bandwidth = 34; // pac_a10 on DevCloud has 34GB/s memory bandwidth
    float compute_roof = 2 * DSPs() * FMax();
    float number_ops = TOTAL_I; // Total operations (GFLOP for GEMV), independent of designs
    float number_bytes = number_ops * sizeof(float);
    float exec_time = ExecTime();
    roofline(mem_bandwidth, compute_roof, number_ops, number_bytes,exec_time);
    if (fopen("roofline.png", "r") == NULL) {
        cout << "Failed to draw roofline!\n";
        return 1;
    }
#endif

    printf("Size of Vector X = %d\n", TOTAL_I);
    printf("Success\n");
    return 0;
}
