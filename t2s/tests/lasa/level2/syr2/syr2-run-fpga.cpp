/*******************************************************************************
* Copyright 2021 Intel Corporation
*
* Licensed under the BSD-2-Clause Plus Patent License (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* https://opensource.org/licenses/BSDplusPatent
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions
* and limitations under the License.
*
*
* SPDX-License-Identifier: BSD-2-Clause-Patent
*******************************************************************************/
// The header file generated by ger.cpp
#include "syr2-interface.h"

// Constant parameters (inner loop bounds) of the design
#include "const-parameters.h"

// Outer loop bounds for testing
#ifdef TINY // For verifying correctness only
    #define J           2
    #define I           2
#else
    #define J           64
    #define I           64
#endif

// Roofline utilities
#include "Roofline.h"

// The only header file needed for including T2S.
#include "HalideBuffer.h"

// For printing output
#include <stdio.h>
#include <iostream>

// For validation of results.
#include <assert.h>

using namespace std;

int main()
{
    const int TOTAL_I = III * II * I;
    const int TOTAL_J = JJJ * JJ * J;

    Halide::Runtime::Buffer<float> a(TOTAL_J, TOTAL_I), x(TOTAL_I), y(TOTAL_J);
    for (size_t i = 0; i < TOTAL_I; i++) {
        for (size_t j = i; j < TOTAL_J; j++) {
            a(j, i) = random();
            a(i, j) = a(j, i);
        }
    }
    for (size_t i = 0; i < TOTAL_I; i++) {
        x(i) = random();
        y(i) = random();
    }

    Halide::Runtime::Buffer<float> z(JJJ, III, JJ, II, J, I);
    syr2(a, x, y, z);

#ifdef TINY
    // Validate the results
    for (int i = 0; i < I; i++)
     for (int j = 0; j < J; j++)
      for (int ii = 0; ii < II; ii++)
       for (int jj = 0; jj < JJ; jj++)
        for (int iii = 0; iii < III; iii++)
         for (int jjj = 0; jjj < JJJ; jjj++) {
            size_t total_i = iii + III*ii + III*II*i;
            size_t total_j = jjj + JJJ*jj + JJJ*JJ*j;
            float golden = a(total_j, total_i) + x(total_i) * y(total_j) + x(total_j) * y(total_i);
            if (i < j) {
                assert(fabs(golden - z(jjj, iii, jj, ii, j, i))
                    <= 0.005*fabs(golden));
            } else {
                assert(fabs(golden - z(iii, jjj, ii, jj, i, j))
                    <= 0.005*fabs(golden));
            }
        }
#else
    // Report performance. DSPs, FMax and ExecTime are automatically figured out from the static analysis
    // during FPGA synthesis and and the dynamic profile during the FGPA execution.
#ifdef S10
    double mem_bandwidth = 75;
#else
    double mem_bandwidth = 33;
#endif
    double compute_roof = 2 * DSPs() * FMax();
    double number_ops = 2 * (double)(TOTAL_I) * (double)(TOTAL_J); // Total operations (GFLOP for GER), independent of designs
    double number_bytes = (double)(II * I) * (double)(JJ * J) * 4 +
                          (double)(II * I) * 4 +
                          (double)(JJ * J) * 4;
    double exec_time = ExecTime("kernel_unloader");
    roofline(mem_bandwidth, compute_roof, number_ops, number_bytes, exec_time);
    if (fopen("roofline.png", "r") == NULL) {
        cout << "Failed to draw roofline!\n";
        return 1;
    }
#endif

    printf("Success\n");
    return 0;
}
