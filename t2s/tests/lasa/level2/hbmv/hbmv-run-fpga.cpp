/*******************************************************************************
* Copyright 2021 Intel Corporation
*
* Licensed under the BSD-2-Clause Plus Patent License (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* https://opensource.org/licenses/BSDplusPatent
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions
* and limitations under the License.
*
*
* SPDX-License-Identifier: BSD-2-Clause-Patent
*******************************************************************************/
#include "util.h"
// The header file generated by gbmv.cpp
#include "hbmv-interface.h"

// Constant parameters (inner loop bounds) of the design
#include "const-parameters.h"

// Outer loop bounds for testing
#ifdef TINY
    #define K           128
    #define Kl          2047
#else
    #define K           64
    #define Kl          2047
#endif

// Roofline utilities
#include "Roofline.h"

// The only header file needed for including T2S.
#include "HalideBuffer.h"

// For printing output
#include <stdio.h>
#include <iostream>

// For validation of results.
#include <assert.h>

using namespace std;

int main()
{
    const int TOTAL_K = KK * K;
    int TOTAL_I = ((Kl + 1 + (VI * II - 1)) / (VI * II)) * (VI * II);
    int I = TOTAL_I / (VI * II);

    Halide::Runtime::Buffer<complex32_t> A(TOTAL_K, TOTAL_K), X(TOTAL_K + TOTAL_I);
    for (int i = 0; i < TOTAL_K; i++) {
        for (int k = 0; k < TOTAL_K; k++) {
            if (k > i || i - k > Kl) {
                A(k, i) = complex32_t(0, 0);
            } else {
                A(k, i) = complex32_t(random(), random());
                A(i, k) = A(k, i).conj();
            }
        }
    }
    for (int k = 0; k < TOTAL_K + TOTAL_I; k++) {
        X(k) = k < TOTAL_K ? complex32_t(random(), random()) : complex32_t(0, 0);
    }
    Halide::Runtime::Buffer<complex32_t> bandedA(TOTAL_K, TOTAL_I);
    for (int k = 0; k < TOTAL_K; k++) {
        for (int i = 0; i < TOTAL_I; i++) {
            bandedA(k, i) = complex32_t(0, 0);
        }
    }
    for (int k = 0; k < TOTAL_K; k++) {
        for (int i = k; i < min(TOTAL_K, k+Kl+1); i++) {
            bandedA(k, i-k) = A(k, i);
        }
    }
    Halide::Runtime::Buffer<complex32_t> O(VI*II*I+K*KK-1);
    hbmv(bandedA, X, O);

#ifdef TINY
    // Validate the results
    for (int i = 0; i < TOTAL_K; i++) {
        complex32_t golden = complex32_t(0, 0);
        for (int k = 0; k < TOTAL_K; k++) {
            golden += A(k, i)*X(k);
        }
        complex32_t delta = golden - O(i);
        assert(fabs(delta.re()) <= 0.005 * fabs(golden.re()) &&
                fabs(delta.im()) <= 0.005 * fabs(golden.im()));
    }
#else
    // Report performance. DSPs, FMax and ExecTime are automatically figured out from the static analysis
    // during FPGA synthesis and and the dynamic profile during the FGPA execution.
#ifdef S10
    double mem_bandwidth = 75;
#else
    double mem_bandwidth = 33;
#endif
    double compute_roof = 2 * DSPs() * FMax();
    double number_ops   = 2 * (double)(TOTAL_I * TOTAL_K); // Total operations (GFLOP for GBMV), independent of designs
    double number_bytes = 4 * (double)(TOTAL_I * TOTAL_K) +
                          4 * (double)(TOTAL_K) +
                          4 * (double)(II*KK*I*K) +
                          4 * (double)(VI*II*KK*I*K);
    double exec_time = ExecTime("kernel_DTopOut");
    roofline(mem_bandwidth, compute_roof, number_ops, number_bytes, exec_time);
    if (fopen("roofline.png", "r") == NULL) {
        cout << "Failed to draw roofline!\n";
        return 1;
    }
#endif

    printf("Success\n");
    return 0;
}
