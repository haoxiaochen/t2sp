[{"path":"/home/u172305/t2sp/t2s/tests/performance/trmm/a.cl", "name":"a.cl", "has_active_debug_locs":false, "absName":"/home/u172305/t2sp/t2s/tests/performance/trmm/a.cl", "content":"/*OpenCL C x86-64-linux-avx-avx2-avx512-avx512_skylake-enable_synthesis-f16c-fma-intel_fpga-opencl-sse41*/\u000A#pragma OPENCL FP_CONTRACT ON\u000A#pragma OPENCL EXTENSION cl_khr_fp64 : enable\u000A#define float_from_bits(x) as_float(x)\u000Ainline float nan_f32() { return NAN; }\u000Ainline float neg_inf_f32() { return -INFINITY; }\u000Ainline float inf_f32() { return INFINITY; }\u000Ainline bool is_nan_f32(float x) {return isnan(x); }\u000Ainline bool is_inf_f32(float x) {return isinf(x); }\u000Ainline bool is_finite_f32(float x) {return isfinite(x); }\u000A#define sqrt_f32 sqrt \u000A#define sin_f32 sin \u000A#define cos_f32 cos \u000A#define exp_f32 exp \u000A#define log_f32 log \u000A#define abs_f32 fabs \u000A#define floor_f32 floor \u000A#define ceil_f32 ceil \u000A#define round_f32 round \u000A#define trunc_f32 trunc \u000A#define pow_f32 pow\u000A#define asin_f32 asin \u000A#define acos_f32 acos \u000A#define tan_f32 tan \u000A#define atan_f32 atan \u000A#define atan2_f32 atan2\u000A#define sinh_f32 sinh \u000A#define asinh_f32 asinh \u000A#define cosh_f32 cosh \u000A#define acosh_f32 acosh \u000A#define tanh_f32 tanh \u000A#define atanh_f32 atanh \u000A#define fast_inverse_f32 native_recip \u000A#define fast_inverse_sqrt_f32 native_rsqrt \u000A#define __address_space___shared __local\u000A\u000A\u000A// ll suffix in OpenCL is reserved for 128-bit integers.\u000A#if defined __OPENCL_VERSION__\u000A#define ADD_INT64_T_SUFFIX(x) x##l\u000A#define ADD_UINT64_T_SUFFIX(x) x##ul\u000A// HLSL doesn't have any suffixes.\u000A#elif defined HLSL_VERSION\u000A#define ADD_INT64_T_SUFFIX(x) x\u000A#define ADD_UINT64_T_SUFFIX(x) x\u000A#else\u000A#define ADD_INT64_T_SUFFIX(x) x##ll\u000A#define ADD_UINT64_T_SUFFIX(x) x##ull\u000A#endif\u000A#pragma OPENCL EXTENSION cl_intel_channels : enable\u000Atypedef union {\u000Abool __attribute__ ((aligned(8))) s[8];\u000Astruct {bool s0,  s1,  s2,  s3,  s4,  s5,  s6,  s7;};\u000A} bool8;\u000Atypedef union {\u000Abool __attribute__ ((aligned(4))) s[4];\u000Astruct {bool s0,  s1,  s2,  s3;};\u000A} bool4;\u000Achannel double8 _ALoader_channel __attribute__((depth(256))) ;\u000Atypedef struct { double8 s[8]; } _AFeeder_channel_array_t;\u000Achannel _AFeeder_channel_array_t _AFeeder_channel __attribute__((depth(256))) ;\u000Achannel double8 _BLoader_channel __attribute__((depth(256))) ;\u000Atypedef struct { double8 s[4]; } _BFeeder_channel_array_t;\u000Achannel _BFeeder_channel_array_t _BFeeder_channel __attribute__((depth(256))) ;\u000Achannel double4 _Out_channel __attribute__((depth(256))) ;\u000A// Address spaces for kernel_ALoader\u000A#define __address_space__ASerializer_mem_channel __global\u000A__kernel void kernel_ALoader(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A const int _B_extent_0,\u000A __address_space__ASerializer_mem_channel const double *restrict _ASerializer_mem_channel)\u000A{\u000A int _0 = _A_extent_1 >> 7;\u000A int _1 = _0 + 1;\u000A for (int _ALoader_s0_i = 0; _ALoader_s0_i < 0 + _1; _ALoader_s0_i++)\u000A {\u000A  int _2 = _B_extent_0 >> 7;\u000A  for (int _ALoader_s0_j = 0; _ALoader_s0_j < 0 + _2; _ALoader_s0_j++)\u000A  {\u000A   int _3 = _A_extent_0 >> 7;\u000A   int _4 = _3 - _ALoader_s0_i + ((_ALoader_s0_i < _0) ? 0 : 1);\u000A   for (int _ALoader_s0_k = _ALoader_s0_i; _ALoader_s0_k < _ALoader_s0_i + _4; _ALoader_s0_k++)\u000A   {\u000A    #pragma loop_coalesce 3\u000A    for (int _ALoader_s0_kk = 0; _ALoader_s0_kk < 0 + 16; _ALoader_s0_kk++)\u000A    {\u000A     for (int _ALoader_s0_ii = 0; _ALoader_s0_ii < 0 + 16; _ALoader_s0_ii++)\u000A     {\u000A      for (int _ALoader_s0_iii = 0; _ALoader_s0_iii < 0 + 8; _ALoader_s0_iii++)\u000A      {\u000A       bool _5 = _ALoader_s0_j == 0;\u000A       bool _6 = _ALoader_s0_k == _ALoader_s0_i;\u000A       bool _7 = _5 && _6;\u000A       int _14 = _A_extent_1 >> 7;\u000A       bool _15 = _ALoader_s0_i < _14;\u000A       bool _16 = _7 || _15;\u000A       if (_16)\u000A       {\u000A        double8 _18;\u000A        int _19 = _A_extent_1 >> 7;\u000A        bool _20 = _ALoader_s0_i < _19;\u000A        if (_20)\u000A        {\u000A         int _21 = _ALoader_s0_iii * 8 + _ALoader_s0_ii * 64 * _ALoader_s0_kk * 1024;\u000A         int _22 = _21 + _ALoader_s0_k * 16384;\u000A         int _23 = _22 + _ALoader_s0_i * 16384 * _3;\u000A         double8 _33 = vload8(0, (__address_space__ASerializer_mem_channel double*)_ASerializer_mem_channel + _23);\u000A         _18 = _33;\u000A        } // if _20\u000A        else\u000A        {\u000A         double _34 = (double) float_from_bits(0 /* 0 */);\u000A         double8 _35 = _34;\u000A         _18 = _35;\u000A        } // if _20 else\u000A        double8 _36 = _18;\u000A        write_channel_intel(_ALoader_channel, _36);\u000A       } // if _16\u000A      } // for _ALoader_s0_iii\u000A     } // for _ALoader_s0_ii\u000A    } // for _ALoader_s0_kk\u000A   } // for _ALoader_s0_k\u000A  } // for _ALoader_s0_j\u000A } // for _ALoader_s0_i\u000A} // kernel kernel_ALoader\u000A#undef __address_space__ASerializer_mem_channel\u000A// Address spaces for kernel_AFeeder\u000A__attribute__((max_global_work_dim(0)))\u000A__attribute__((autorun))\u000A__kernel void kernel_AFeeder(\u000A)\u000A{\u000A _AFeeder_channel_array_t _AFeeder_channel_array;\u000A double8 _AFeeder_value_shreg;\u000A uint _AFeeder_time_stamp_shreg;\u000A double8 _AFeeder_in_v_temp;\u000A uint _AFeeder_cycle_temp;\u000A double8 __attribute__((memory, numbanks(8), singlepump, numwriteports(1), numreadports(1))) _AFeeder_DB_0_ibuffer[2][16][16][8];\u000A #pragma unroll\u000A for (int _AFeeder_s0_jjj_init = 0; _AFeeder_s0_jjj_init < 0 + 4; _AFeeder_s0_jjj_init++)\u000A {\u000A  bool _39 = _AFeeder_s0_jjj_init == 0;\u000A  if (_39)\u000A  {\u000A   uint _40 = (uint)(ADD_UINT64_T_SUFFIX(6144));\u000A   _AFeeder_cycle_temp = _40;\u000A  } // if _39\u000A } // for _AFeeder_s0_jjj_init\u000A while(1)\u000A {\u000A  uint _41 = (uint)(ADD_UINT64_T_SUFFIX(6144));\u000A  uint _42 = _AFeeder_cycle_temp;\u000A  uint _43 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A  uint _44 = _42 & _43;\u000A  bool _45 = _41 <= _44;\u000A  if (_45)\u000A  {\u000A   double8 __46 = read_channel_intel(_ALoader_channel);\u000A   _AFeeder_in_v_temp = __46;\u000A  } // if _45\u000A  #pragma unroll\u000A  for (int _AFeeder_s0_buf = 0; _AFeeder_s0_buf < 0 + 8; _AFeeder_s0_buf++)\u000A  {\u000A   bool _47 = _AFeeder_s0_buf == 0;\u000A   if (_47)\u000A   {\u000A    double8 _48 = _AFeeder_in_v_temp;\u000A    _AFeeder_value_shreg = _48;\u000A    (void)_48;\u000A    uint _49 = _AFeeder_cycle_temp;\u000A    _AFeeder_time_stamp_shreg = _49;\u000A    (void)_49;\u000A   } // if _47\u000A   else\u000A   {\u000A    double8 _51 = _AFeeder_value_shreg;\u000A    _AFeeder_value_shreg = _51;\u000A    (void)_51;\u000A    uint _53 = _AFeeder_time_stamp_shreg;\u000A    _AFeeder_time_stamp_shreg = _53;\u000A    (void)_53;\u000A   } // if _47 else\u000A   double8 _55 = _AFeeder_value_shreg;\u000A   double8 _56 = __fpga_reg(__fpga_reg(_55));\u000A   _AFeeder_value_shreg = _56;\u000A   (void)_56;\u000A   uint _58 = _AFeeder_time_stamp_shreg;\u000A   uint _59 = __fpga_reg(__fpga_reg(_58));\u000A   _AFeeder_time_stamp_shreg = _59;\u000A   (void)_59;\u000A   uint _60 = (uint)(ADD_UINT64_T_SUFFIX(6144));\u000A   uint _62 = _AFeeder_time_stamp_shreg;\u000A   uint _63 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A   uint _64 = _62 & _63;\u000A   bool _65 = _60 <= _64;\u000A   if (_65)\u000A   {\u000A    uint _67 = _AFeeder_time_stamp_shreg;\u000A    uint _68 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A    uint _69 = _67 & _68;\u000A    uint _70 = (uint)(ADD_UINT64_T_SUFFIX(6144));\u000A    uint _71 = _69 - _70;\u000A    uint _72 = (uint)(ADD_UINT64_T_SUFFIX(7));\u000A    uint _73 = _71 & _72;\u000A    int _74 = (int)(_73);\u000A    bool _75 = _AFeeder_s0_buf == _74;\u000A    if (_75)\u000A    {\u000A     double8 _77 = _AFeeder_value_shreg;\u000A     uint _79 = _AFeeder_time_stamp_shreg;\u000A     uint _80 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A     uint _81 = _79 >> _80;\u000A     uint _82 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A     uint _83 = _81 & _82;\u000A     bool _84 = (bool)(_83);\u000A     uint _86 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A     uint _87 = _79 & _86;\u000A     uint _88 = (uint)(ADD_UINT64_T_SUFFIX(6144));\u000A     uint _89 = _87 - _88;\u000A     int _90 = (int)(_89);\u000A     int _91 = _90 >> 7;\u000A     int _93 = _90 >> 3;\u000A     int _94 = _93 & 15;\u000A     _AFeeder_DB_0_ibuffer[_84][_91][_94][_AFeeder_s0_buf] = _77;\u000A    } // if _75\u000A   } // if _65\u000A   uint _95 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A   uint _97 = _AFeeder_time_stamp_shreg;\u000A   uint _98 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A   uint _99 = _97 >> _98;\u000A   bool _100 = _95 < _99;\u000A   if (_100)\u000A   {\u000A    uint _102 = _AFeeder_time_stamp_shreg;\u000A    uint _103 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A    uint _104 = _102 & _103;\u000A    int _105 = (int)(_104);\u000A    uint _106 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A    uint _107 = _102 >> _106;\u000A    uint _108 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A    uint _109 = _107 & _108;\u000A    bool _110 = (bool)(_109);\u000A    bool _111 = !(_110);\u000A    int _112 = _105 >> 9;\u000A    int _113 = _105 >> 5;\u000A    int _114 = _113 & 15;\u000A    double8 _115 = _AFeeder_DB_0_ibuffer[_111][_112][_114][_AFeeder_s0_buf];\u000A    _AFeeder_channel_array.s[_AFeeder_s0_buf] = _115;\u000A    (void)_AFeeder_s0_buf;\u000A   } // if _100\u000A  } // for _AFeeder_s0_buf\u000A  uint _116 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A  uint _118 = _AFeeder_time_stamp_shreg;\u000A  uint _119 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A  uint _120 = _118 >> _119;\u000A  bool _121 = _116 < _120;\u000A  if (_121)\u000A  {\u000A   write_channel_intel(_AFeeder_channel, _AFeeder_channel_array);\u000A   (void)_AFeeder_channel_array;\u000A  } // if _121\u000A  uint _122 = _AFeeder_cycle_temp;\u000A  uint _123 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A  uint _124 = _122 + _123;\u000A  _AFeeder_cycle_temp = _124;\u000A } // while _AFeeder_s0_outermost_loop_infinite\u000A} // kernel kernel_AFeeder\u000A// Address spaces for kernel_BLoader\u000A#define __address_space__BSerializer_mem_channel __global\u000A__kernel void kernel_BLoader(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A const int _B_extent_0,\u000A __address_space__BSerializer_mem_channel const double *restrict _BSerializer_mem_channel)\u000A{\u000A int _125 = _A_extent_1 >> 7;\u000A int _126 = _125 + 1;\u000A for (int _BLoader_s0_i = 0; _BLoader_s0_i < 0 + _126; _BLoader_s0_i++)\u000A {\u000A  int _127 = _B_extent_0 >> 7;\u000A  for (int _BLoader_s0_j = 0; _BLoader_s0_j < 0 + _127; _BLoader_s0_j++)\u000A  {\u000A   int _128 = _A_extent_0 >> 7;\u000A   int _129 = _128 - _BLoader_s0_i + ((_BLoader_s0_i < _125) ? 0 : 1);\u000A   for (int _BLoader_s0_k = _BLoader_s0_i; _BLoader_s0_k < _BLoader_s0_i + _129; _BLoader_s0_k++)\u000A   {\u000A    for (int _BLoader_s0_kk = 0; _BLoader_s0_kk < 0 + 16; _BLoader_s0_kk++)\u000A    {\u000A     for (int _BLoader_s0_jj = 0; _BLoader_s0_jj < 0 + 32; _BLoader_s0_jj++)\u000A     {\u000A      for (int _BLoader_s0_jjj = 0; _BLoader_s0_jjj < 0 + 4; _BLoader_s0_jjj++)\u000A      {\u000A       bool _130 = _BLoader_s0_j == 0;\u000A       bool _131 = _BLoader_s0_k == _BLoader_s0_i;\u000A       bool _132 = _130 && _131;\u000A       int _139 = _A_extent_1 >> 7;\u000A       bool _140 = _BLoader_s0_i < _139;\u000A       bool _141 = _132 || _140;\u000A       if (_141)\u000A       {\u000A        double8 _142;\u000A        int _143 = _A_extent_1 >> 7;\u000A        bool _144 = _BLoader_s0_i < _143;\u000A        if (_144)\u000A        {\u000A         int _21 = _BLoader_s0_jjj * 8 + _BLoader_s0_jj * 32 + _BLoader_s0_kk * 1024;\u000A         int _22 = _21 + _BLoader_s0_k * 16384;\u000A         int _23 = _22 + _BLoader_s0_j * 16384 * _128;\u000A         double8 _153 = vload8(0, (__address_space__BSerializer_mem_channel double*)_BSerializer_mem_channel + _23);\u000A         _142 = _153;\u000A        } // if _144\u000A        else\u000A        {\u000A         double _154 = (double) float_from_bits(0 /* 0 */);\u000A         double8 _155 = _154;\u000A         _142 = _155;\u000A        } // if _144 else\u000A        double8 _156 = _142;\u000A        write_channel_intel(_BLoader_channel, _156);\u000A       } // if _141\u000A      } // for _BLoader_s0_jjj\u000A     } // for _BLoader_s0_jj\u000A    } // for _BLoader_s0_kk\u000A   } // for _BLoader_s0_k\u000A  } // for _BLoader_s0_j\u000A } // for _BLoader_s0_i\u000A} // kernel kernel_BLoader\u000A#undef __address_space__BSerializer_mem_channel\u000A// Address spaces for kernel_BFeeder\u000A__attribute__((max_global_work_dim(0)))\u000A__attribute__((autorun))\u000A__kernel void kernel_BFeeder(\u000A)\u000A{\u000A _BFeeder_channel_array_t _BFeeder_channel_array;\u000A double8 _BFeeder_value_shreg;\u000A uint _BFeeder_time_stamp_shreg;\u000A double8 _BFeeder_in_v_temp;\u000A uint _BFeeder_cycle_temp;\u000A double8 __attribute__((memory, numbanks(4), singlepump, numwriteports(1), numreadports(1))) _BFeeder_DB_0_ibuffer[2][16][32][4];\u000A #pragma unroll\u000A for (int _BFeeder_s0_iii_init = 0; _BFeeder_s0_iii_init < 0 + 8; _BFeeder_s0_iii_init++)\u000A {\u000A  bool _159 = _BFeeder_s0_iii_init == 0;\u000A  if (_159)\u000A  {\u000A   uint _160 = (uint)(ADD_UINT64_T_SUFFIX(6144));\u000A   _BFeeder_cycle_temp = _160;\u000A  } // if _159\u000A } // for _BFeeder_s0_iii_init\u000A while(1)\u000A {\u000A  uint _161 = (uint)(ADD_UINT64_T_SUFFIX(6144));\u000A  uint _162 = _BFeeder_cycle_temp;\u000A  uint _163 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A  uint _164 = _162 & _163;\u000A  bool _165 = _161 <= _164;\u000A  if (_165)\u000A  {\u000A   double8 __166 = read_channel_intel(_BLoader_channel);\u000A   _BFeeder_in_v_temp = __166;\u000A  } // if _165\u000A  #pragma unroll\u000A  for (int _BFeeder_s0_buf = 0; _BFeeder_s0_buf < 0 + 4; _BFeeder_s0_buf++)\u000A  {\u000A   bool _167 = _BFeeder_s0_buf == 0;\u000A   if (_167)\u000A   {\u000A    double8 _168 = _BFeeder_in_v_temp;\u000A    _BFeeder_value_shreg = _168;\u000A    (void)_168;\u000A    uint _169 = _BFeeder_cycle_temp;\u000A    _BFeeder_time_stamp_shreg = _169;\u000A    (void)_169;\u000A   } // if _167\u000A   else\u000A   {\u000A    double8 _171 = _BFeeder_value_shreg;\u000A    _BFeeder_value_shreg = _171;\u000A    (void)_171;\u000A    uint _173 = _BFeeder_time_stamp_shreg;\u000A    _BFeeder_time_stamp_shreg = _173;\u000A    (void)_173;\u000A   } // if _167 else\u000A   double8 _175 = _BFeeder_value_shreg;\u000A   double8 _176 = __fpga_reg(__fpga_reg(_175));\u000A   _BFeeder_value_shreg = _176;\u000A   (void)_176;\u000A   uint _178 = _BFeeder_time_stamp_shreg;\u000A   uint _179 = __fpga_reg(__fpga_reg(_178));\u000A   _BFeeder_time_stamp_shreg = _179;\u000A   (void)_179;\u000A   uint _180 = (uint)(ADD_UINT64_T_SUFFIX(6144));\u000A   uint _182 = _BFeeder_time_stamp_shreg;\u000A   uint _183 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A   uint _184 = _182 & _183;\u000A   bool _185 = _180 <= _184;\u000A   if (_185)\u000A   {\u000A    uint _187 = _BFeeder_time_stamp_shreg;\u000A    uint _188 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A    uint _189 = _187 & _188;\u000A    uint _190 = (uint)(ADD_UINT64_T_SUFFIX(6144));\u000A    uint _191 = _189 - _190;\u000A    uint _192 = (uint)(ADD_UINT64_T_SUFFIX(3));\u000A    uint _193 = _191 & _192;\u000A    int _194 = (int)(_193);\u000A    bool _195 = _BFeeder_s0_buf == _194;\u000A    if (_195)\u000A    {\u000A     double8 _197 = _BFeeder_value_shreg;\u000A     uint _199 = _BFeeder_time_stamp_shreg;\u000A     uint _200 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A     uint _201 = _199 >> _200;\u000A     uint _202 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A     uint _203 = _201 & _202;\u000A     bool _204 = (bool)(_203);\u000A     uint _206 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A     uint _207 = _199 & _206;\u000A     uint _208 = (uint)(ADD_UINT64_T_SUFFIX(6144));\u000A     uint _209 = _207 - _208;\u000A     int _210 = (int)(_209);\u000A     int _211 = _210 >> 7;\u000A     int _213 = _210 >> 2;\u000A     int _214 = _213 & 31;\u000A     _BFeeder_DB_0_ibuffer[_204][_211][_214][_BFeeder_s0_buf] = _197;\u000A    } // if _195\u000A   } // if _185\u000A   uint _215 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A   uint _217 = _BFeeder_time_stamp_shreg;\u000A   uint _218 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A   uint _219 = _217 >> _218;\u000A   bool _220 = _215 < _219;\u000A   if (_220)\u000A   {\u000A    uint _222 = _BFeeder_time_stamp_shreg;\u000A    uint _223 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A    uint _224 = _222 & _223;\u000A    int _225 = (int)(_224);\u000A    uint _226 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A    uint _227 = _222 >> _226;\u000A    uint _228 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A    uint _229 = _227 & _228;\u000A    bool _230 = (bool)(_229);\u000A    bool _231 = !(_230);\u000A    int _232 = _225 >> 9;\u000A    int _233 = _225 & 31;\u000A    double8 _234 = _BFeeder_DB_0_ibuffer[_231][_232][_233][_BFeeder_s0_buf];\u000A    _BFeeder_channel_array.s[_BFeeder_s0_buf] = _234;\u000A    (void)_BFeeder_s0_buf;\u000A   } // if _220\u000A  } // for _BFeeder_s0_buf\u000A  uint _235 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A  uint _237 = _BFeeder_time_stamp_shreg;\u000A  uint _238 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A  uint _239 = _237 >> _238;\u000A  bool _240 = _235 < _239;\u000A  if (_240)\u000A  {\u000A   write_channel_intel(_BFeeder_channel, _BFeeder_channel_array);\u000A   (void)_BFeeder_channel_array;\u000A  } // if _240\u000A  uint _241 = _BFeeder_cycle_temp;\u000A  uint _242 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A  uint _243 = _241 + _242;\u000A  _BFeeder_cycle_temp = _243;\u000A } // while _BFeeder_s0_outermost_loop_infinite\u000A} // kernel kernel_BFeeder\u000A// Address spaces for kernel_Out\u000A__kernel void kernel_Out(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A const int _B_extent_0)\u000A{\u000A _BFeeder_channel_array_t _BFeeder_channel_array;\u000A _AFeeder_channel_array_t _AFeeder_channel_array;\u000A // produce Z\u000A double _Z_shreg[512][4][8];\u000A double _Z_pipe_shreg[4][3585];\u000A // produce Y\u000A double8 _Y_shreg[4];\u000A double _Z_temp[4][8];\u000A // produce X\u000A double8 _X_shreg[8];\u000A double _Z_shreg_temp;\u000A int _Z_pipe_iter_temp;\u000A int _Z_pipe_base_temp;\u000A _Z_pipe_iter_temp = 4096;\u000A _Z_pipe_base_temp = 0;\u000A int _244 = _A_extent_1 >> 7;\u000A int _245 = _244 + 1;\u000A for (int _X_s0_i = 0; _X_s0_i < 0 + _245; _X_s0_i++)\u000A {\u000A  int _246 = _B_extent_0 >> 7;\u000A  for (int _X_s0_j = 0; _X_s0_j < 0 + _246; _X_s0_j++)\u000A  {\u000A   int _247 = _A_extent_0 >> 7;\u000A   int _248 = _247 - _X_s0_i + ((_X_s0_i < _244) ? 0 : 1);\u000A   for (int _X_s0_k = _X_s0_i; _X_s0_k < _X_s0_i + _248; _X_s0_k++)\u000A   {\u000A    #pragma loop_coalesce 3\u000A    for (int _X_s0_kk = 0; _X_s0_kk < 0 + 16; _X_s0_kk++)\u000A    {\u000A     for (int _X_s0_ii = 0; _X_s0_ii < 0 + 16; _X_s0_ii++)\u000A     {\u000A      for (int _X_s0_jj = 0; _X_s0_jj < 0 + 32; _X_s0_jj++)\u000A      {\u000A       #pragma unroll\u000A       for (int _dummy__1_s0_iii = 0; _dummy__1_s0_iii < 0 + 8; _dummy__1_s0_iii++)\u000A       {\u000A        #pragma unroll\u000A        for (int _dummy_s0_jjj = 0; _dummy_s0_jjj < 0 + 4; _dummy_s0_jjj++)\u000A        {\u000A         double _250 = _Z_shreg[511][_dummy_s0_jjj][_dummy__1_s0_iii];\u000A         _Z_temp[_dummy_s0_jjj][_dummy__1_s0_iii] = _250;\u000A         #pragma unroll\u000A         for (int _dummy__2_s0_l1 = 0; _dummy__2_s0_l1 < 0 + 511; _dummy__2_s0_l1++)\u000A         {\u000A          int _251 = 511 - _dummy__2_s0_l1;\u000A          int _252 = 510 - _dummy__2_s0_l1;\u000A          double _254 = _Z_shreg[_252][_dummy_s0_jjj][_dummy__1_s0_iii];\u000A          _Z_shreg[_251][_dummy_s0_jjj][_dummy__1_s0_iii] = _254;\u000A          (void)_254;\u000A         } // for _dummy__2_s0_l1\u000A         double _255 = _Z_temp[_dummy_s0_jjj][_dummy__1_s0_iii];\u000A         _Z_shreg[0][_dummy_s0_jjj][_dummy__1_s0_iii] = _255;\u000A         (void)_255;\u000A        } // for _dummy_s0_jjj\u000A       } // for _dummy__1_s0_iii\u000A       int _256 = _A_extent_1 >> 7;\u000A       bool _257 = _X_s0_i < _256;\u000A       if (_257)\u000A       {\u000A        _BFeeder_channel_array_t __258 = read_channel_intel(_BFeeder_channel);\u000A        _BFeeder_channel_array = __258;\u000A        (void)__258;\u000A        _AFeeder_channel_array_t __259 = read_channel_intel(_AFeeder_channel);\u000A        _AFeeder_channel_array = __259;\u000A        (void)__259;\u000A       } // if _257\u000A       #pragma unroll\u000A       for (int _X_s0_iii = 0; _X_s0_iii < 0 + 8; _X_s0_iii++)\u000A       {\u000A        #pragma unroll\u000A        for (int _X_s0_jjj = 0; _X_s0_jjj < 0 + 4; _X_s0_jjj++)\u000A        {\u000A         double8 _260;\u000A         bool _261 = _X_s0_jjj == 0;\u000A         if (_261)\u000A         {\u000A          double8 __262 = _AFeeder_channel_array.s[_X_s0_iii];\u000A          _260 = __262;\u000A         } // if _261\u000A         else\u000A         {\u000A          double8 _264 = _X_shreg[_X_s0_iii];\u000A          _260 = _264;\u000A         } // if _261 else\u000A         double8 _265 = _260;\u000A         _X_shreg[_X_s0_iii] = _265;\u000A         (void)_265;\u000A         double8 _267 = _X_shreg[_X_s0_iii];\u000A         double8 _268 = __fpga_reg(__fpga_reg(_267));\u000A         _X_shreg[_X_s0_iii] = _268;\u000A         (void)_268;\u000A         double8 _269;\u000A         bool _270 = _X_s0_iii == 0;\u000A         if (_270)\u000A         {\u000A          double8 __271 = _BFeeder_channel_array.s[_X_s0_jjj];\u000A          _269 = __271;\u000A         } // if _270\u000A         else\u000A         {\u000A          double8 _273 = _Y_shreg[_X_s0_jjj];\u000A          _269 = _273;\u000A         } // if _270 else\u000A         double8 _274 = _269;\u000A         _Y_shreg[_X_s0_jjj] = _274;\u000A         (void)_274;\u000A         double8 _276 = _Y_shreg[_X_s0_jjj];\u000A         double8 _277 = __fpga_reg(__fpga_reg(_276));\u000A         _Y_shreg[_X_s0_jjj] = _277;\u000A         (void)_277;\u000A         double _278;\u000A         bool _279 = _X_s0_k == _X_s0_i;\u000A         bool _280 = _X_s0_kk == 0;\u000A         bool _281 = _279 && _280;\u000A         if (_281)\u000A         {\u000A          double _282 = (double) float_from_bits(0 /* 0 */);\u000A          _278 = _282;\u000A         } // if _281\u000A         else\u000A         {\u000A          double _284 = _Z_shreg[0][_X_s0_jjj][_X_s0_iii];\u000A          double _285 = __fpga_reg(_284);\u000A          _278 = _285;\u000A         } // if _281 else\u000A         double _286 = _278;\u000A         _Z_shreg_temp = _286;\u000A         #pragma unroll\u000A         for (int _X_s0_kkk = 0; _X_s0_kkk < 0 + 8; _X_s0_kkk++)\u000A         {\u000A          double _287 = _Z_shreg_temp;\u000A          double _289 = _X_shreg[_X_s0_iii][_X_s0_kkk];\u000A          double _291 = _Y_shreg[_X_s0_jjj][_X_s0_kkk];\u000A          double _292 = _289 * _291;\u000A          double _293 = _287 + _292;\u000A          _Z_shreg_temp = _293;\u000A          int _294 = _X_s0_kkk & 3;\u000A          bool _295 = _294 == 3;\u000A          if (_295)\u000A          {\u000A           double _296 = _Z_shreg_temp;\u000A           double _297 = __fpga_reg(_296);\u000A           _Z_shreg_temp = _297;\u000A          } // if _295\u000A         } // for _X_s0_kkk\u000A         double _298 = _Z_shreg_temp;\u000A         _Z_shreg[0][_X_s0_jjj][_X_s0_iii] = _298;\u000A         (void)_298;\u000A         #pragma unroll\u000A         for (int _X_s0_kkk = 0; _X_s0_kkk < 0 + 8; _X_s0_kkk++)\u000A         {\u000A          bool _299 = _X_s0_kkk == 7;\u000A          bool _300 = _X_s0_kk == 15;\u000A          bool _301 = _299 && _300;\u000A          int _302 = _A_extent_0 >> 7;\u000A          int _303 = _302 + -1;\u000A          bool _304 = _X_s0_k == _303;\u000A          bool _305 = _301 && _304;\u000A          if (_305)\u000A          {\u000A           int _306 = _X_s0_iii * 512;\u000A           double _308 = _Z_shreg[0][_X_s0_jjj][_X_s0_iii];\u000A           _Z_pipe_shreg[_X_s0_jjj][_306] = _308;\u000A           (void)_308;\u000A          } // if _305\u000A         } // for _X_s0_kkk\u000A        } // for _X_s0_jjj\u000A       } // for _X_s0_iii\u000A       bool _309 = _X_s0_jj == 0;\u000A       bool _310 = _X_s0_ii == 0;\u000A       bool _311 = _309 && _310;\u000A       int _312 = _A_extent_0 >> 7;\u000A       int _313 = _312 + -1;\u000A       bool _314 = _X_s0_k == _313;\u000A       bool _315 = _311 && _314;\u000A       bool _316 = _X_s0_kk == 15;\u000A       bool _317 = _315 && _316;\u000A       int _318 = _A_extent_1 >> 7;\u000A       bool _319 = _X_s0_i < _318;\u000A       bool _320 = _317 && _319;\u000A       if (_320)\u000A       {\u000A        int _321 = _Z_pipe_iter_temp;\u000A        _Z_pipe_base_temp = _321;\u000A       } // if _320\u000A       double4 _Out_channel_temp;\u000A       #pragma unroll\u000A       for (int _Z_pipe_b__62 = 0; _Z_pipe_b__62 < 0 + 4; _Z_pipe_b__62++)\u000A       {\u000A        double _323 = _Z_pipe_shreg[_Z_pipe_b__62][0];\u000A        _Out_channel_temp[_Z_pipe_b__62] = _323;\u000A        #pragma unroll\u000A        for (int _Z_pipe_b__62_dummy = 0; _Z_pipe_b__62_dummy < 0 + 4; _Z_pipe_b__62_dummy++)\u000A        {\u000A         double _324 = _Out_channel_temp[_Z_pipe_b__62_dummy];\u000A         double _325 = __fpga_reg(__fpga_reg(_324));\u000A         _Out_channel_temp[_Z_pipe_b__62_dummy] = _325;\u000A        } // for _Z_pipe_b__62_dummy\u000A       } // for _Z_pipe_b__62\u000A       int _326 = _Z_pipe_iter_temp;\u000A       int _327 = _Z_pipe_base_temp;\u000A       int _328 = _327 + 4096;\u000A       bool _329 = _326 < _328;\u000A       if (_329)\u000A       {\u000A        double4 _330 = _Out_channel_temp;\u000A        write_channel_intel(_Out_channel, _330);\u000A        (void)_330;\u000A       } // if _329\u000A       #pragma unroll\u000A       for (int _Z_pipe_b__63 = 0; _Z_pipe_b__63 < 0 + 4; _Z_pipe_b__63++)\u000A       {\u000A        #pragma unroll\u000A        for (int _Z_pipe_p__31 = 0; _Z_pipe_p__31 < 0 + 7; _Z_pipe_p__31++)\u000A        {\u000A         #pragma unroll\u000A         for (int _Z_pipe_l__31 = 0; _Z_pipe_l__31 < 0 + 511; _Z_pipe_l__31++)\u000A         {\u000A          int _331 = _Z_pipe_p__31 * 512;\u000A          int _332 = _331 + _Z_pipe_l__31;\u000A          int _333 = _332 + 1;\u000A          double _335 = _Z_pipe_shreg[_Z_pipe_b__63][_333];\u000A          _Z_pipe_shreg[_Z_pipe_b__63][_332] = _335;\u000A          (void)_335;\u000A         } // for _Z_pipe_l__31\u000A         int _336 = _Z_pipe_p__31 * 512;\u000A         int _337 = _336 + 511;\u000A         int _338 = _336 + 512;\u000A         double _340 = _Z_pipe_shreg[_Z_pipe_b__63][_338];\u000A         double _341 = __fpga_reg(__fpga_reg(_340));\u000A         _Z_pipe_shreg[_Z_pipe_b__63][_337] = _341;\u000A         (void)_341;\u000A        } // for _Z_pipe_p__31\u000A       } // for _Z_pipe_b__63\u000A       int _342 = _Z_pipe_iter_temp;\u000A       int _343 = _342 + 1;\u000A       _Z_pipe_iter_temp = _343;\u000A      } // for _X_s0_jj\u000A     } // for _X_s0_ii\u000A    } // for _X_s0_kk\u000A   } // for _X_s0_k\u000A  } // for _X_s0_j\u000A } // for _X_s0_i\u000A} // kernel kernel_Out\u000A// Address spaces for kernel_unloader\u000A#define __address_space__unloader_mem_channel __global\u000A__kernel void kernel_unloader(\u000A const int _A_extent_1,\u000A const int _B_extent_0,\u000A __address_space__unloader_mem_channel double *restrict _unloader_mem_channel)\u000A{\u000A int _addr_temp;\u000A _addr_temp = 0;\u000A int _344 = _A_extent_1 >> 7;\u000A for (int _unloader_s0_i = 0; _unloader_s0_i < 0 + _344; _unloader_s0_i++)\u000A {\u000A  int _345 = _B_extent_0 >> 7;\u000A  for (int _unloader_s0_j = 0; _unloader_s0_j < 0 + _345; _unloader_s0_j++)\u000A  {\u000A   #pragma loop_coalesce 3\u000A   for (int _unloader_s0_iii = 0; _unloader_s0_iii < 0 + 8; _unloader_s0_iii++)\u000A   {\u000A    for (int _unloader_s0_ii = 0; _unloader_s0_ii < 0 + 16; _unloader_s0_ii++)\u000A    {\u000A     for (int _unloader_s0_jj = 0; _unloader_s0_jj < 0 + 32; _unloader_s0_jj++)\u000A     {\u000A      double4 __346 = read_channel_intel(_Out_channel);\u000A      int _347 = _addr_temp;\u000A      int _348 = _347 * 4;\u000A      vstore4(__346, 0, (__address_space__unloader_mem_channel double*)_unloader_mem_channel + _348);\u000A      int _349 = _addr_temp;\u000A      int _350 = _349 + 1;\u000A      _addr_temp = _350;\u000A     } // for _unloader_s0_jj\u000A    } // for _unloader_s0_ii\u000A   } // for _unloader_s0_iii\u000A  } // for _unloader_s0_j\u000A } // for _unloader_s0_i\u000A} // kernel kernel_unloader\u000A#undef __address_space__unloader_mem_channel\u000A\u000A"}]